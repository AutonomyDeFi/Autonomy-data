{"tool": {"name": "tool", "description": "This is a base tool that does nothing.", "tags": ["defi", "tool"], "schema": {"input": {"x": "<class 'int'>", "y": "<class 'int'>"}, "output": "<class 'int'>", "default": {"x": 1, "y": 1}}}, "tool.defillama": {"name": "tool.defillama", "description": "\n        Connects to the Defillama API and allows the user to select which chain, project, symbol or pool they want. \n        :param params: A dictionary with optional filters (chain (first letter uppercase), project, symbol, pool).\n        :return: Filtered list of pool data.\n\n        Example input: \n        # Fetch data for a specific chain and project\n        params = {\n            \"chain\": \"Ethereum\",\n            \"project\": \"lido\",\n        }\n\n        here is an example of the output:\n\n        [\n            {\n                'chain': 'Ethereum',\n                'project': 'lido',\n                'symbol': 'STETH',\n                'tvlUsd': 13856337621,\n                'apyBase': 3.6,\n                'apyReward': None,\n                'apy': 3.6,\n                'rewardTokens': None,\n                'pool': '747c1d2a-c668-4682-b9f9-296708a3dd90',\n                'apyPct1D': 0,\n                'apyPct7D': 0,\n                'apyPct30D': -0.4,\n                'stablecoin': False,\n                'ilRisk': 'no',\n                'exposure': 'single',\n                'predictions': {\n                    'predictedClass': 'Stable/Up',\n                    'predictedProbability': 56.00000000000001,\n                'binnedConfidence': 1\n                },\n                'poolMeta': None,\n                'mu': 4.55354,\n                'sigma': 0.04797,\n                'count': 509,\n                'outlier': False,\n                'underlyingTokens': [\n                    '0x0000000000000000000000000000000000000000'\n                ],\n                'il7d': None,\n                'apyBase7d': None,\n                'apyMean30d': 3.70763,\n                'volumeUsd1d': None,\n                'volumeUsd7d': None,\n                'apyBaseInception': None\n            }\n        ]\n        here is an input:    \n        dl_instance = DefiLlama()\n        result=dl_instance.call(chain=\"ethereum\", project=\"compound\")\n\n        here is an example of the output that corresponds with the above input:\n\n        [{'apy': 0.03383, 'market': 'compound', 'asset': 'WETH', 'chain': 'Ethereum', 'timestamp': 1695495056.3511412}\n        {'apy': 0.02071, 'market': 'compound', 'asset': 'WBTC', 'chain': 'Ethereum', 'timestamp': 1695495056.351143}\n        {'apy': 2.44336, 'market': 'compound', 'asset': 'USDC', 'chain': 'Ethereum', 'timestamp': 1695495056.351143}\n        {'apy': 3.59457, 'market': 'compound', 'asset': 'USDT', 'chain': 'Ethereum', 'timestamp': 1695495056.351143}\n        {'apy': 4.04343, 'market': 'compound', 'asset': 'DAI', 'chain': 'Ethereum', 'timestamp': 1695495056.3511438}\n        {'apy': 0.00237, 'market': 'compound', 'asset': 'BAT', 'chain': 'Ethereum', 'timestamp': 1695495056.3511438}\n        {'apy': 0.18519, 'market': 'compound', 'asset': 'UNI', 'chain': 'Ethereum', 'timestamp': 1695495056.351145}\n        {'apy': 0.01424, 'market': 'compound', 'asset': 'SUSHI', 'chain': 'Ethereum', 'timestamp': 1695495056.351145}\n        {'apy': 0.03629, 'market': 'compound', 'asset': 'LINK', 'chain': 'Ethereum', 'timestamp': 1695495056.351145}\n        {'apy': 0.01553, 'market': 'compound', 'asset': 'COMP', 'chain': 'Ethereum', 'timestamp': 1695495056.351146}\n        {'apy': 0.62444, 'market': 'compound', 'asset': 'ZRX', 'chain': 'Ethereum', 'timestamp': 1695495056.351146}\n        {'apy': 0.08457, 'market': 'compound', 'asset': 'AAVE', 'chain': 'Ethereum', 'timestamp': 1695495056.351146}\n        {'apy': 1.75703, 'market': 'compound', 'asset': 'TUSD', 'chain': 'Ethereum', 'timestamp': 1695495056.351147}\n        {'apy': 0.32905, 'market': 'compound', 'asset': 'MKR', 'chain': 'Ethereum', 'timestamp': 1695495056.351147}\n        {'apy': 0.00256, 'market': 'compound', 'asset': 'YFI', 'chain': 'Ethereum', 'timestamp': 1695495056.351147}\n        {'apy': 0.45049, 'market': 'compound', 'asset': 'USDP', 'chain': 'Ethereum', 'timestamp': 1695495056.3511481}]\n    ", "tags": ["defi", "tool"], "schema": {"input": {"chain": "<class 'str'>", "project": "<class 'str'>", "symbol": "<class 'str'>"}, "output": "<class 'dict'>", "default": {"chain": null, "project": null, "symbol": null}}}, "tool.defillama.aave": {"name": "tool.defillama.aave", "description": "\n        Connects to the Defillama API and allows the user to select which chain, project, symbol or pool they want. \n        :param params: A dictionary with optional filters (chain (first letter uppercase), project, symbol, pool).\n        :return: Filtered list of pool data.\n\n        Example input: \n        # Fetch data for a specific chain and project\n        params = {\n            \"chain\": \"Ethereum\",\n            \"project\": \"lido\",\n        }\n\n        here is an input:     result=aave_instance.call(chain=\"Ethereum\", symbol=\"ETH\")\n        here is an example of the output that corresponds with the above input:\n\n        [{'apy': 0.00262, 'market': 'aave-v3', 'asset': 'WSTETH', 'chain': 'Ethereum', 'timestamp': 1695493935.62648},\n        {'apy': 0.08366, 'market': 'aave-v3', 'asset': 'WBTC', 'chain': 'Ethereum', 'timestamp': 1695493935.626482}, \n        {'apy': 2.28461, 'market': 'aave-v3', 'asset': 'WETH', 'chain': 'Ethereum', 'timestamp': 1695493935.626482}, \n        {'apy': 0, 'market': 'aave-v3', 'asset': 'SDAI', 'chain': 'Ethereum', 'timestamp': 1695493935.626482}, \n        {'apy': 0.12134, 'market': 'aave-v3', 'asset': 'RETH', 'chain': 'Ethereum', 'timestamp': 1695493935.626483}, \n        {'apy': 2.75842, 'market': 'aave-v3', 'asset': 'USDT', 'chain': 'Ethereum', 'timestamp': 1695493935.626483},\n        {'apy': 0, 'market': 'aave-v3', 'asset': 'AAVE', 'chain': 'Ethereum', 'timestamp': 1695493935.626483}, \n        {'apy': 5.28374, 'market': 'aave-v3', 'asset': 'USDC', 'chain': 'Ethereum', 'timestamp': 1695493935.626484}, \n        {'apy': 0.01158, 'market': 'aave-v3', 'asset': 'LINK', 'chain': 'Ethereum', 'timestamp': 1695493935.626484},\n        {'apy': 0.26722, 'market': 'aave-v3', 'asset': 'CBETH', 'chain': 'Ethereum', 'timestamp': 1695493935.626485}, \n        {'apy': 0.21244, 'market': 'aave-v3', 'asset': 'MKR', 'chain': 'Ethereum', 'timestamp': 1695493935.626485}, \n    ", "tags": ["defi", "tool"], "schema": {"input": {"chain": "<class 'str'>", "project": "<class 'str'>", "symbol": "<class 'str'>"}, "output": "<class 'dict'>", "default": {"chain": null, "project": "aave-v3", "symbol": null}}}, "tool.defillama.lido": {"name": "tool.defillama.lido", "description": "\n        Connects to the Defillama API and allows the user to select which chain, project, symbol or pool they want. \n        :param params: A dictionary with optional filters (chain (first letter uppercase), project, symbol, pool).\n        :return: Filtered list of pool data.\n\n        Example input: \n        # Fetch data for a specific chain and project\n        params = {\n            \"chain\": \"Ethereum\",\n            \"project\": \"lido\",\n        }\n\n        here is an example of the output:\n\n        [\n            {\n                'chain': 'Ethereum',\n                'project': 'lido',\n                'symbol': 'STETH',\n                'tvlUsd': 13856337621,\n                'apyBase': 3.6,\n                'apyReward': None,\n                'apy': 3.6,\n                'rewardTokens': None,\n                'pool': '747c1d2a-c668-4682-b9f9-296708a3dd90',\n                'apyPct1D': 0,\n                'apyPct7D': 0,\n                'apyPct30D': -0.4,\n                'stablecoin': False,\n                'ilRisk': 'no',\n                'exposure': 'single',\n                'predictions': {\n                    'predictedClass': 'Stable/Up',\n                    'predictedProbability': 56.00000000000001,\n                'binnedConfidence': 1\n                },\n                'poolMeta': None,\n                'mu': 4.55354,\n                'sigma': 0.04797,\n                'count': 509,\n                'outlier': False,\n                'underlyingTokens': [\n                    '0x0000000000000000000000000000000000000000'\n                ],\n                'il7d': None,\n                'apyBase7d': None,\n                'apyMean30d': 3.70763,\n                'volumeUsd1d': None,\n                'volumeUsd7d': None,\n                'apyBaseInception': None\n            }\n        ]\n\n\n        here is an input:\n        lido_instance = Lido()\n        result=lido_instance.call(project=\"lido\")\n        here is an example of the output that corresponds with the above input:\n\n        [{'apy': 3.6, 'market': 'lido', 'asset': 'STETH', 'chain': 'Ethereum', 'timestamp': 1695494321.673901},\n        {'apy': 4.18, 'market': 'lido', 'asset': 'STMATIC', 'chain': 'Polygon', 'timestamp': 1695494321.673903},\n        {'apy': 6.51, 'market': 'lido', 'asset': 'STSOL', 'chain': 'Solana', 'timestamp': 1695494321.6739042}]\n\n    ", "tags": ["defi", "tool"], "schema": {"input": {"chain": "<class 'str'>", "project": "<class 'str'>", "symbol": "<class 'str'>"}, "output": "<class 'dict'>", "default": {"chain": null, "project": "lido", "symbol": null}}}, "tool.defillama.rocketpool": {"name": "tool.defillama.rocketpool", "description": "\n        Connects to the Defillama API and allows the user to select which chain, project, symbol or pool they want. \n        :param params: A dictionary with optional filters (chain (first letter uppercase), project, symbol, pool).\n        :return: Filtered list of pool data.\n\n        Example input: \n        # Fetch data for a specific chain and project\n        params = {\n            \"chain\": \"Ethereum\",\n            \"project\": \"lido\",\n        }\n\n        here is an input:\n        rocket_pool_instance = RocketPool()\n        result=rocket_pool_instance.call(project=\"rocket-pool\", symbol=\"RETH\")\n        here is an example of the output that corresponds with the above input:\n        [{'apy': 3.21066, 'market': 'rocket-pool', 'asset': 'RETH', 'chain': 'Ethereum', 'timestamp': 1695494506.412746}]\n    ", "tags": ["defi", "tool"], "schema": {"input": {"chain": "<class 'str'>", "project": "<class 'str'>", "symbol": "<class 'str'>"}, "output": "<class 'dict'>", "default": {"chain": null, "project": "rocket-pool", "symbol": null}}}, "tool.inch": {"name": "tool.inch", "description": "This is a base tool that does nothing.", "tags": ["defi", "tool"], "schema": {"input": {"x": "<class 'int'>", "y": "<class 'int'>"}, "output": null, "default": {"x": 1, "y": 1}}}, "tool.inch.balances": {"name": "tool.inch.balances", "description": "\n        Gets token balances for a wallet address from the 1Inch Balance API.\n        :param wallet_address: A wallet address.\n        :return: A JSON blob with token balances.\n    ", "tags": ["defi", "tool"], "schema": {"input": {"wallet_address": "<class 'str'>"}, "output": null, "default": {"wallet_address": null}}}, "tool.inch.prices": {"name": "tool.inch.prices", "description": "\n\n    Gets the token prices from the 1inch API.\n\n    params: A list of token addresses.\n    return: A dictionary of token addresses and prices.\n\n    ", "tags": ["defi", "tool"], "schema": {"input": {"tokens": "list[str]"}, "output": "dict[str, float]", "default": {"tokens": null}}}}